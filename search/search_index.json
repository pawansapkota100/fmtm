{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\udd17 Welcome To The Field Mapping Documentation \ud83e\udd17","text":""},{"location":"#what-is-one-thing-all-the-greatest-solutions-out-there-have-in-common","title":"What is ONE thing all the greatest solutions out there have in common?","text":"<p>They never forget the people they are building for (^^) </p> <p>So who are we building field mapping solutions for? In short, we build solutions for:</p>"},{"location":"#the-field-mapping-manager-coordinating-field-mapping","title":"The field mapping manager (coordinating field mapping)","text":"<p>The field mapping manager is responsible for coordinating field mapping activities, ensuring the accuracy and completeness of the data collected, and managing the data itself. This involves a number of key steps, including:</p> <ul> <li>Planning: The field mapping manager must develop a clear plan   for the data collection process, including identifying key areas of   focus and establishing timelines and targets.</li> </ul> <ul> <li>Recruitment: The field mapping manager must recruit and train   field mappers, ensuring that they have the necessary skills and   expertise to collect accurate and high-quality data.</li> </ul> <ul> <li> <p>Coordination: The field mapping manager must coordinate the activities   of the field mappers, ensuring that they are working together   effectively and efficiently.</p> <p></p> </li> </ul>"},{"location":"#the-field-mapper-collecting-data","title":"The field mapper (collecting data)","text":"<p>The field mapper is responsible for collecting data in the field. To ensure the success of the field mapper, we must consider a number of key factors. These include:</p> <ul> <li>Ease of use: The field mapper must be able to easily and efficiently   collect data, without requiring extensive training or technical   expertise.</li> </ul> <ul> <li>Accessibility: The field mapper must be able to access and   collect data from a wide range of environments, including remote or   hard-to-reach locations.</li> </ul> <ul> <li>Data quality: The field mapper must be able to ensure the accuracy and   completeness of the data they collect, as well as identify and address   any errors or issues that arise.</li> </ul>"},{"location":"#the-validator-quality-checking-the-data","title":"The validator (quality checking the data)","text":"<p>The validator is responsible for quality checking the data collected by the field mapper, ensuring that it is accurate, complete, and free from errors. The validator faces a number of challenges and issues, including:</p> <ul> <li>Incomplete or inaccurate data: The validator must identify and   address any data that is incomplete, inaccurate, or otherwise flawed.</li> </ul> <ul> <li>Conflicting data: The validator may encounter data that   conflicts with other data sources, requiring them to identify and   resolve any discrepancies.</li> </ul> <ul> <li>Data validation protocols: The validator must adhere to strict   validation protocols and guidelines, ensuring that the data meets a high   level of quality and accuracy.</li> </ul> <p>Click here to see an overview of who you are building for, which actions they take and some ideas for solutions!</p> <p>Below is an overview of the user flow of the Field Mapper, the Mapping Coordinator / Field Mapping Manager and the Validator.</p>"},{"location":"#the-field-mapping-manager-the-person-who-coordinates-field-mapping","title":"The Field Mapping Manager (The person who coordinates field mapping)","text":"<p>The Field Mapping Manager is tasked with coordinating all mapping activities, ensuring that Field Mappers are safe and qualified to work, as well as monitoring data quality. The Field Mapping Manager has to consider 3 main activities:</p> <ol> <li>Pre-field data collection activities<ul> <li>Setting up and testing tools</li> <li>Creating a form</li> <li>Training field mappers (making sure that they understand the form and how    to fill it)</li> <li>Creating an area of interest within the location to be mapped</li> </ul> </li> <li>Data collection activities<ul> <li>Preparing daily, weekly and monthly activity plans</li> <li>Deploying team (assessing safety and qualifications of mappers)</li> <li>Data quality monitoring</li> </ul> </li> <li>Post-field data collection activities<ul> <li>Daily review of data</li> <li>Giving and recieving team feedback</li> <li>Updating tools and methodoligies</li> </ul> </li> </ol> <p>If you want more information, click on this virtual whiteboard! to see all the steps a Field Mapping Coordinator or Manager goes through. Here's a sneak-peek:</p> <ul> <li>See also data collection approach in in this training guide&lt;&lt;</li> </ul> <p></p>"},{"location":"#the-field-mapper-the-person-who-collects-data","title":"The Field Mapper (The person who collects data)","text":"<p>The Field Mapper surveys locations and collects data from them. The basic work flow that a Field Mapper has to consider is as follows:</p> <ol> <li>Find a phone that:<ul> <li>Works well with the app.</li> <li>Has mobile data or an internet plan.</li> </ul> </li> <li>Install all necessary apps on the phone.</li> <li>Access the OSM registration site and register.</li> <li>Follow the tutorial and choose a campaign.</li> <li>Select a task from the campaign.</li> <li>Launch the map app which allows you to see the moving map of the points that    you are now responsible for.</li> <li>Complete each point within the task, making sure to answer the questions in    the form for each one.</li> <li>Send the data of each point until the task is complete.</li> <li>Once the task is complete, signal that your task is finished. This lets the    Validator know that they can check the quality of your data.</li> </ol> <p>If you want to see this workflow in more detail, click on this virtual whiteboard!</p> <p>Here's a sneak-peek:</p> <p></p>"},{"location":"#the-validator-the-person-who-checks-the-quality-of-data-collected","title":"The Validator (The person who checks the quality of data collected)","text":"<p>The Validator does the following tasks to ensure that quality data is collected and uploaded to OSM:</p> <ul> <li>Logs into task manager</li> <li>Checks how many tasks need validation</li> <li>Checks tasks for errors</li> <li>Stops mappers that make mistakes and explains how they can fix their errors</li> <li>Lowers supervision on good mappers in order to spend more time on those who   are stuggling</li> <li>Uploads high quality data to OSM and marks completed tasks as done</li> </ul> <p>Some of the pain points and struggles faced by the Validator include:</p> <ul> <li>Lack of validators (the Validator is often the same person as the   Field Mapping Manager)</li> <li>Many areas of the world are still unmapped on online commercial maps</li> <li>The quality of maps needs to improve</li> <li>The more developers complicate tools, the more they reduce the usefulness   of the tools</li> </ul> <p>For more details, click on this virtual whiteboard!</p> <p>See sneak-peek below.</p> <ul> <li>See also all steps of validation &gt;&gt;in this training guide&lt;&lt;</li> <li>See also global validator Becky's OSM diary which features:   \"Common Feedback I give while Validating Building Projects\"</li> </ul> <p></p> <p>Some of the key points covered are:</p> <ul> <li>Understanding the mapping project and the intended use of the collected data</li> <li>Verifying the accuracy and completeness of the collected data</li> <li>Ensuring consistency with existing data and standards</li> <li>Providing clear and constructive feedback to field mappers and coordinators</li> </ul> <p>Overall, understanding the needs and considerations of each of these three user groups is essential for building effective field mapping solutions.</p>"},{"location":"About/","title":"\ud83d\udcd6 History","text":""},{"location":"About/#how-was-fmtm-born","title":"How was FMTM born?","text":"<p>It started as Ivan's idea to build FMTM (Ivan Gayton is Senior Humanitarian Advisor at Humanitarian OpenStreetMap Team) which then became a collaborative project with the efforts of Ivan, Rob Savoye who is Senior Technical Lead at Humanitarian OpenStreetMap Team and many other members from HOT as well as volunteers interested in the project.</p> <p>HOT uses ODK heavily, but most of the data never makes it into OSM because all the data processing is manual and slow, so it doesn't get done.</p> <p></p> <p>Ivan Gayton(Senior Humanitarian Advisor at Humanitarian OpenStreetMap Team) heard about what Rob was working on and goes \"That's the missing piece I needed!\". He'd been wanting to build FMTM for years, but lacked the ability to process the data. A webinar then took place in September 2022 that showcased the high interest from the community and the need for collaborative field mapping that really kicked off the starting point for building the Field Mapping Tasking Manager. It was Ivan who got HOT interested enough to direct some resources to his idea, so FMTM was born.</p> <p>Want to know about OSM-fieldwork project? click here</p>"},{"location":"About/#a-project-to-provide-tools-for-open-mapping-campaigns","title":"A project to provide tools for Open Mapping campaigns","text":"<p>The Field Mapping Tasking Manager (FMTM) is a project that aims to provide tools for coordinating field mapping activities in Open Mapping campaigns. While there are existing field mapping applications, there is a lack of efficient tools to coordinate these activities. The FMTM builds on the HOT Tasking Manager and other mapping applications to provide a more streamlined and organized process for completing mapping tasks.</p> <p>Currently, it is possible to implement a Field Mapping Tasking Manager workflow using existing tools, but it requires significant effort and can be challenging.</p> <p>The FMTM project is developing automation features to address these challenges and make the process more accessible to users.</p> <p>By providing a centralized platform for organizing and managing mapping tasks, assigning them to specific users, and tracking their progress, the FMTM aims to simplify the coordination of mapping activities. The tool also provides analytics and reporting features, allowing users to gain insights into mapping campaigns and adjust their strategies accordingly.</p> <p>Background and description of the project and idea are here: please have a look at this blog if you haven't yet!</p>"},{"location":"About/#how-to-contribute","title":"How to contribute","text":"<p>The FMTM project is open source and community-driven, welcoming contributions from designers, user testers, and both front-end and back-end developers. If you're interested in getting involved, please see our contributor guidelines for more information. We welcome questions and feedback, so don't hesitate to reach out to us. \ud83d\udc4d\ud83c\udf89</p>"},{"location":"About/#using-opendatakits-select-from-map-feature","title":"Using OpenDataKit's Select From Map feature","text":"<p>OpenDataKit's Select From Map feature is a useful tool for field mappers to collect data in a well-structured questionnaire format. The tool was incorporated into ODK in mid-2022 and allows mappers to select an object from a map, view its existing attributes, and fill out a form with new information and attributes.</p> <p>To prepare map files for ODK, inspiration is taken from the HOT Tasking Manager, which allows remote mappers to choose well-defined small \"task\" areas, ensuring full coverage of the project area and no unintended duplication of tasks. For example, a mapper can approach a building, select that building from a map view within ODK on their mobile phone, and add the opening hours, number of floors, construction material, or any number of useful attributes in a well-structured questionnaire format</p> <p>To prepare the appropriate map files for ODK, we are taking our inspiration from the HOT Tasking Manager, which allows remote mappers to choose well-defined small \"task\" areas, ensuring full coverage of the project area and no unintended duplication of tasks.</p>"},{"location":"About/#users","title":"Users","text":"<p>There are three main user roles for using ODK's Select From Map feature: campaign managers, field mappers, and validators.</p>"},{"location":"About/#campaign-managers","title":"Campaign managers","text":"<p>Campaign managers select an Area of Interest (AOI) and organize field mappers to go out and collect data. They need to:</p> <p></p> <ul> <li>Select an AOI polygon by creating a GeoJSON or by tracing a polygon   in a Web map</li> <li>Choose a task division scheme (number of features or area per task,   and possible variations on what features to use as the preferred splitting lines)</li> <li>Provide specific instructions and guidance for field mappers on the project.</li> <li>Provide a URL to a mobile-friendly Web page where field mappers can, from   their mobile phone, select a task that is not already \"checked out\"   (or possibly simply allocate areas to the field mappers).</li> <li>See the status of tasks (open, \"checked out\", completed but not validated,   requires to rework, validated, etc) in the Web browser on their computer</li> </ul>"},{"location":"About/#field-mappers","title":"Field mappers","text":"<p>Field mappers select (or are allocated) individual tasks within a project AOI and use ODK Collect to gather data in those areas. They need to:</p> <ul> <li>Visit a mobile-friendly Web page where they can see available tasks on a map</li> <li>Choose an area and launch ODK Collect with the form corresponding to their   allocated area pre-loaded</li> </ul>"},{"location":"About/#validators","title":"Validators","text":"<p>Validators review the data collected by field mappers and assess its quality. If the data is good, the validators merge the portion of the data that belongs in OpenStreetMap to OSM. If it requires more work, the validators either fix it themselves (for minor stuff like spelling or capitalization mistakes that don't seem to be systematic) or inform the field mappers that they need to fix it. They need to:</p> <ul> <li>Access completed data sets of \"submissions\" as Comma Separated Values   and/or OSM XML so that they can review them.</li> <li>Mark areas as validated or requiring rework</li> <li>Communicate with field mappers if rework is necessary</li> <li>Merge good-quality data into OSM (probably from JOSM).</li> <li>Mark areas as completed and merged.</li> </ul>"},{"location":"About/#info-for-developers","title":"Info for developers","text":"<p>For this visit the Getting Started Page</p>"},{"location":"CONTRIBUTING/","title":"\ud83e\udd17 Welcome","text":"<p> First off, We are really glad you're reading this, because we need volunteer developers to help improve the Field Mapping Tasking Manager (FMTM)! </p> <p>We welcome and encourage contributors of all skill levels, and we are committed to making sure your participation is inclusive, enjoyable, and rewarding. If you have never contributed to an open source project before, we are a good place to start, and we will make sure you are supported every step of the way. If you have any questions, please ask!</p> <p>You can see an overview of the project and the process we have gone through in developing FMTM so far in these slides</p> <p>Furthermore, there are many ways to contribute to the Field Mapping Tasking Manager (FMTM), which includes:</p>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>Right now, we are in the process of building the prototype. We warmly welcome your input in testing and sharing your feedback. If you are also interested in coordinating a field testing session, please reach out!</p>"},{"location":"CONTRIBUTING/#code-contributions","title":"Code contributions","text":"<p>Create pull requests (PRs) for changes that you think are needed. We would really appreciate your help!</p> <p>Skills with the following would be beneficial:</p> <ul> <li>Python</li> <li>FastAPI</li> <li>Javascript</li> <li>React</li> <li>Docker</li> <li>CI/CD workflows</li> </ul> <p>Our latest task board can be found here.</p>"},{"location":"CONTRIBUTING/#report-bugs-and-suggest-improvements","title":"Report bugs and suggest improvements","text":"<p>The issue queue is the best way to get started. There are issue templates for BUGs and FEATURES that you can use, you could also create your own. Once you have submitted an issue, it will be assigned one label from the following label categories. If you are wondering where to start, you can filter by the good first issue label.</p>"},{"location":"CONTRIBUTING/#thank-you","title":"Thank you","text":"<p>Thank you very much in advance for your contributions!! Please ensure you refer to our Code of Conduct. If you've read the guidelines, but are still not sure how to contribute on Github, please reach out to us via our Slack #geospatial-tech-and-innovation.</p>"},{"location":"CONTRIBUTING/#code-contribution-guidelines","title":"Code Contribution guidelines","text":""},{"location":"CONTRIBUTING/#workflow","title":"Workflow","text":"<p>We operate the \"Fork &amp; Pull\" model explained at About Pull Requests</p> <p>You should fork the project into your own repo, create a topic branch there and then make one or more pull requests back to the repository. Your pull requests will then be reviewed and discussed by other developers. Don't submit a Pull Request while still developing the code, wait till the feature is complete and ready for review. A preliminary review by other developers can be requested via the comments for the issue on github, or via slack or email.</p> <p>It is prefered that all patches contain any documentation updates made, and for any new features, a test case is preferred when possible. Keep patches focused on a single feature to avoid merging complications with other developers. The old free software joke is \"patches are better than bug reports\" is how we contribute to the community of people involved with this project.</p>"},{"location":"CONTRIBUTING/#if-you-are-reporting-a-problem","title":"If you are reporting a problem","text":"<ul> <li>Describe exactly what you were trying to achieve, what you did, what you   expected to happen and what did happen instead. Include relevant information   about the platform, OS version etc. you are using. Include shell commands you   typed in, log files, errors messages etc.</li> </ul> <ul> <li>Please open a separate issue for each problem, question, or comment you have.   Do not re-use existing issues for other topics, even if they are similar. This   keeps issues small and manageable and makes it much easier to follow through   and make sure each problem is taken care of.</li> </ul>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<p>Project documentation should be in Markdown format, and in a docs subdirectory. While it is possible to use HTML in Markdown documents for tables and images, it is prefered to use the Markdown style as it's much easier to read.</p>"},{"location":"CONTRIBUTING/#coding-style","title":"Coding Style","text":"<p>Python enforces a certain amount of style due to indent levels. Unlike C/C++, we don't have to worry about curly braces. It is prefered that all code follows object oriented techniques, with a minimal amount of code other than basic control in the main function. This allows code to be easily reused and run either standalone, or part of a REST API backend. Code that is not designed to be run standalone can have a main function to do simple testing during development. That test code should be moved to a standalone test case when possible. Pytest is used as the test framework for standalone test cases.</p> <p>Code follows a CamelCase style. Classes use an Upper Case for the first word, method use a lower case for the first word. Variable names are all lower case with an underbar as a word separator. Properly naming everything makes it much easier to read the code and get an idea of what it is doing. This enables people new to this project to contribute easier.</p> <p>All methods should have a comment that can be used by pydoc. The usage of base classes is encouraged so functionality can be shared. Comments in the code are encouraged when necessary to explain code that may not be obvious, but avoid over commenting as well. Code should be able to be read like a book, with descriptive names used, no fancy tricks unless required. Always be concious of performance and security.</p>"},{"location":"FAQ/","title":"\u2753 Frequently Asked Questions \u2753","text":""},{"location":"FAQ/#for-users","title":"For Users","text":"<p>Q: What is FMTM?</p> <p>A: FMTM stands for Field Monitoring Task Manager. It is a web-based application that facilitates remote monitoring of field activities for humanitarian organizations.</p> <p>Q: Do I need to create an account to use the FMTM Web App?</p> <p>A: No, you can use the FMTM Web App without creating an account, but creating an account allows you to contribute to mapping projects and access additional features.</p> <p>Q: How do I browse and select mapping projects on the FMTM Web App?</p> <p>A: You can browse and select mapping projects on the FMTM Web App by clicking on the \"Projects\" tab and selecting a project of interest. You can view project details, tasks, and mapping data on the project page.</p> <p>Q: How do I contribute to a mapping project on the FMTM Web App?</p> <p>A: To contribute to a mapping project on the FMTM Web App, you can create an account, select a project of interest, and choose a task to work on. You can then use the mapping tools provided to complete the task.</p> <p>Q: Can I work on multiple mapping tasks at the same time on the FMTM Web App?</p> <p>A: Yes, you can work on multiple mapping tasks at the same time on the FMTM Web App, as long as you can commit the necessary time and effort to each task.</p> <p>Q: How do I know if my mapping work on the FMTM Web App is accurate?</p> <p>A: The FMTM Web App has a validation process where other contributors review and validate the mapping work. This helps to ensure the accuracy of the mapping data.</p> <p>Q: Can I provide feedback on a mapping project on the FMTM Web App?</p> <p>A: Yes, you can provide feedback on a mapping project on the FMTM Web App by leaving a comment on the project page or contacting the project manager.</p> <p>Q: How do I download mapping data from a project on the FMTM Web App?</p> <p>A: To download mapping data from a project on the FMTM Web App, you can select the project of interest and click on the \"Export\" button on the project page.</p> <p>Q: Can I use the mapping data from the FMTM Web App for my own research or projects?</p> <p>A: The mapping data on the FMTM Web App is generally open and available for use, but it is important to check the specific project requirements and licenses before using the data for your own research or projects.</p>"},{"location":"FAQ/#for-contributors","title":"For Contributors","text":"<p>Q: What is the Field Mapping Tasking Manager (FMTM)?</p> <p>A: The Field Mapping Tasking Manager (FMTM) is an online platform that allows contributors to participate in mapping projects related to humanitarian and development work.</p> <p>Q: How can I become a contributor to the FMTM?</p> <p>A: To become a contributor to the FMTM, you can create an account on the platform and join a mapping project.</p> <p>Q: Who can contribute to FMTM?</p> <p>A: Anyone can contribute to FMTM. It is an open-source project, and contributions from developers, designers, and other contributors are always welcome.</p> <p>Q: What kind of contributions can I make to FMTM?</p> <p>A: There are several ways you can contribute to FMTM, including:</p> <p>Development: If you have experience in web development, you can contribute by fixing bugs, adding new features, or improving the existing codebase.</p> <p>Design: If you are a designer, you can contribute by improving the user interface, creating new design assets, or providing feedback on the existing design.</p> <p>Documentation: If you have experience in technical writing, you can contribute by writing documentation, tutorials, or other educational materials.</p> <p>Testing: If you have experience in software testing, you can contribute by testing the application and reporting bugs or suggesting improvements.</p> <p>Translation: If you are fluent in a language other than English, you can contribute by translating the application or its documentation into your language.</p> <p>Q: What technologies are used in FMTM?</p> <p>A: FMTM is built using several technologies, including Django, Postgres, Redis, Celery, and Vue.js. The codebase is written in Python, HTML, CSS, and JavaScript.</p> <p>Q: How do I set up FMTM locally?</p> <p>A: To set up FMTM locally, you need to have Python, Postgres, Redis, and Node.js installed on your system. You can follow the instructions in the README file of the FMTM repository to set up the project.</p> <p>Q: How can I report a bug or suggest a new feature for FMTM?</p> <p>A: You can report bugs or suggest new features by opening an issue on the FMTM repository on GitHub. Be sure to provide as much detail as possible, including steps to reproduce the bug, screenshots, or mockups for new features.</p> <p>Q: How can I contribute to FMTM if I'm new to open source or web development?</p> <p>A: FMTM welcomes contributions from developers of all levels of experience, including those who are new to open source or web development. You can start by exploring the project's codebase and documentation, asking questions in the community, and contributing to issues labeled as \"good first issue.\" Additionally, you can join the FMTM community on Slack to connect with other contributors and get help with your contributions.</p> <p>Q: What are the benefits of contributing to the FMTM?</p> <p>A: Contributing to the FMTM allows you to help with important humanitarian and development work, while also developing your mapping skills and knowledge.</p> <p>Q: Do I need to have prior mapping experience to contribute to the FMTM?</p> <p>A: No, prior mapping experience is not required to contribute to the FMTM. The platform provides training and resources to help new contributors get started.</p> <p>Q: How do I know which mapping project to join?</p> <p>A: The FMTM provides information about each project, including the location, the organization sponsoring the project, and the mapping goals. Review the project information and choose a project that interests you.</p> <p>Q: Can I work on multiple mapping projects at the same time?</p> <p>A: Yes, you can work on multiple mapping projects at the same time. However, it is important to ensure that you can commit the necessary time and effort to each project.</p> <p>Q: How do I get feedback on my mapping work?</p> <p>A: The FMTM provides a validation process where other contributors review and provide feedback on mapping work. You can also contact project managers or experienced contributors for additional feedback.</p> <p>Q: How can I improve my mapping skills?</p> <p>A: The FMTM provides training and resources to help you improve your mapping skills. You can also join mapping communities and forums to connect with other contributors and learn from their experiences.</p> <p>Q: Can I use the mapping data for my own research or projects?</p> <p>A: The mapping data on the FMTM is generally open and available for use, but it is important to check the specific project requirements and licenses before using the data for your own research or projects.</p>"},{"location":"Guide-On-Improving-Documentation/","title":"Structures To Improve GitHub Documentation","text":""},{"location":"Guide-On-Improving-Documentation/#overview","title":"Overview","text":"<p>An overall documentation structure outline, that cuts across; Project, Product, System and Process documentation. These structures can be replicated for all forms of documentation needed by HOTOSM. It also includes specific tips for improving already existing documentation.</p>"},{"location":"Guide-On-Improving-Documentation/#goals","title":"Goals","text":"<ol> <li>Highlight the definitions of each type of documentation that are    commonly used on Github.</li> <li>Provide a foundation to lay information on top of, in order to    produce efficient documentation about any product or project in the    future.</li> <li>List key parts of each documentation type that aid the flow and    experience of the reader.</li> <li>Outline general tips to improve already existing documentation.</li> </ol>"},{"location":"Guide-On-Improving-Documentation/#common-documentation-types-on-github","title":"Common Documentation Types On Github","text":"<p>I have found 4 main documentation types through my own personal research. They can all be written individually but often coincide to complement specific parts of each other. For example, Product documentation may include some Process documentation under the Usage section, demonstrating how to use that product. These 4 types in full, are as follows:</p> <ul> <li>Product Documentation</li> <li>Project Documentation</li> <li>System Documentation</li> <li>Process Documentation</li> </ul>"},{"location":"Guide-On-Improving-Documentation/#1-structure-for-product-documentation","title":"1. Structure for Product Documentation","text":"<p>Product documentation is the process of recording key information (almost everything you need to know) about a product, including how to use it. Product documentation may have form of Process documentation within it (this will be further explained later on). A flexible and reusable structure of essential components of product documentation is as follows:</p> <ul> <li>Overview</li> <li>Introduction: What the product is, what it does, the target audience, etc.</li> <li>Features: A breakdown of each integral part of the product, their   functionality and purpose</li> <li>Benefits: How the features give users an edge over other similar   products. In other words, what\u2019s in it for the user.</li> <li>Usage: A step by step process of how to use the product</li> <li>Support / Frequently Asked Questions (about the product)</li> <li>License</li> </ul> <p>The points stated above can be used in that order and can also be switched around based on convenience and the type of product. Additionally, other points can be added if necessary, but these are what I believe to be some of the most important.</p>"},{"location":"Guide-On-Improving-Documentation/#2-structure-for-project-documentation","title":"2. Structure for Project Documentation","text":"<p>Project documentation is the process of recording the key project details that are needed to implement a project. It\u2019s like a roadmap of what the project is and all necessary information about what it entails. Main structural components are in the following order:</p> <ul> <li>Overview</li> <li>Vision</li> <li>Aim / Mission</li> <li>Introduction</li> <li>Project plan</li> <li>Project schedule</li> <li>Tools and Features</li> <li>Access</li> <li>Resources</li> <li>Support / Guidelines</li> </ul>"},{"location":"Guide-On-Improving-Documentation/#3-structure-for-system-documentation","title":"3. Structure for System Documentation","text":"<p>System documentation is an all-encompassing record of details of a full working system. It is very similar to the structure of product documentation but it\u2019s usually on a wider scale. It may even include some forms of product and process documentation within it. In addition to the structure of product documentation above, other key components it might include are: architecture design, program source code and maintenance / help guide.</p>"},{"location":"Guide-On-Improving-Documentation/#4-structure-for-process-documentation","title":"4. Structure for Process Documentation","text":"<p>Process documentation is capturing and listing all steps involved in doing a task. It is the full explanation of a process, step by step. Process documentation is very useful in other documentation forms. As mentioned earlier, it can be used within System, Product or Project documentation, to explain a process. The format is usually:</p> <ul> <li>Overview</li> <li>Introduction</li> <li>Explanation steps (breakdown of the task)</li> <li>Help (if any problems occur while acting on the steps)</li> </ul> <p>The structures I have suggested above are similar, consistent and can be easily replicated for various projects, systems and products. They work well when integrated together, balancing out issues where necessary. Each structure also serves as a foundation that can be added to and built upon.</p>"},{"location":"Guide-On-Improving-Documentation/#improving-existing-documentation","title":"Improving Existing Documentation","text":"<ol> <li> <p>Acronyms should be stated in full before repetitive    use. Acronyms like ODK, OSM, etc, should be stated in full before    use or after each use within brackets e.g ODK (Open Data Kit). This    negates confusion for readers / users and just simplifies things.</p> </li> <li> <p>Important features should be put in bold. For example \u201cselect    from map\u201d and \u2018\u2019ODK Collect\u201d can be easily overlooked by readers if    they aren't highlighted, even though they are important features.</p> </li> <li> <p>Generally simplifying words and phrases. This makes    documentation more user friendly and much easier to understand,    since users come from all different backgrounds. For example:</p> <p>\u201cODK incorporates a new functionality\u201d can become \u201cODK has brought in a new feature\u201d.</p> <p>\u201cField Mappers select (or are allocated) individual tasks within a  project\u2019s AOI\u201d could be changed to \u201cField Mappers choose or are  given tasks that are part of a project\u2019s Areas Of Interest.\u201d</p> </li> <li> <p>Avoid long paragraphs. Short paragraphs that pass a clear    message are less clumsy and flustering for readers. Breaking down    topics into little, easy to understand chunks, is more user    friendly.</p> </li> <li> <p>Maintain a positive tone in the writing.. Keep the text    positive and informative. Avoid words like \u2018obviously\u2019 and    \u2018basically\u2019, that may be interpreted as demeaning or    condescending. Do not expect readers to have a certain amount of    knowledge on specific aspects, break down everything that needs to    be broken down.</p> </li> <li> <p>Constantly update your documentation. Projects, products and    systems are always evolving. Thus, it is necessary to keep    documentation up to date with any new changes.</p> </li> <li> <p>Consistency in the documentation format. Maintaining    consistency is a key aspect of creating clear and effective    documentation.This consistency includes but is not limited to    elements like numbering, font styles, heading sizes, and spacing.</p> <p>Using the same font for all headings and subheadings can help  readers quickly identify important sections of the  document. Similarly, using consistent spacing between paragraphs  and sections can make the document more visually appealing and  easier to follow. This helps to create a documentation that is  clear, effective, and easy to use.</p> </li> </ol>"},{"location":"INSTALL/","title":"Installation","text":""},{"location":"INSTALL/#software-requirements","title":"Software Requirements","text":"<p>It is recommended to run FMTM on a Linux-based machine.</p> <p>This includes MacOS, but some tools must be substituted.</p> <p>For Windows users, the easiest option is to use Windows Subsystem for Linux</p> <p>Before you can install and use this application, you will need to have the following software installed and configured on your system:</p> <p>If running Debian/Ubuntu, the install script below does this for you.</p> <p>Git to clone the FMTM repository.</p> <p>Docker to run FMTM inside containers.</p> <p>Docker Compose for easy orchestration of the FMTM services.</p> <p>This is Docker Compose V2, the official Docker CLI plugin.</p> <p>i.e. <code>docker compose</code> commands, not <code>docker-compose</code> (the old tool).</p>"},{"location":"INSTALL/#easy-install","title":"Easy Install","text":"<p>On a Linux-based machine with <code>bash</code> installed, run the script:</p> <p>Note: it is best to run this script as a user other than root.</p> <p>However, if you run as root, a user svcfmtm will be created for you.</p> <pre><code>curl -L https://get.fmtm.dev -o install.sh\nbash install.sh\n\n# Then follow the prompts\n</code></pre>"},{"location":"INSTALL/#manual-install","title":"Manual Install","text":"<p>If more details are required, check out the dev docs</p>"},{"location":"INSTALL/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation<ul> <li>Software Requirements</li> <li>Easy Install</li> <li>Manual Install<ul> <li>Table of Contents</li> <li>Clone the FMTM repository</li> <li>Setup Your Local Environment<ul> <li>1. Setup OSM OAUTH 2.0</li> <li>2. Create an <code>.env</code> File</li> </ul> </li> <li>Start the API with Docker<ul> <li>Select the install type</li> <li>Pull the Images</li> <li>Build the Frontend</li> <li>Start the Containers</li> </ul> </li> <li>Setup ODK Central User (Optional)</li> <li>Import Test Data (Optional)</li> <li>Check Authentication (Optional)</li> </ul> </li> <li>Alternative Operating Systems<ul> <li>Windows</li> <li>MacOS</li> <li>A Note on Docker Desktop</li> </ul> </li> </ul> </li> </ul>"},{"location":"INSTALL/#clone-the-fmtm-repository","title":"Clone the FMTM repository","text":"<p>Clone the repository to your local machine using the following command:</p> <pre><code>git clone https://github.com/hotosm/fmtm.git\n\n# If you wish to deploy for production, change to the main branch\ngit checkout main\n</code></pre>"},{"location":"INSTALL/#setup-your-local-environment","title":"Setup Your Local Environment","text":"<p>These steps are essential to run and test your code!</p>"},{"location":"INSTALL/#1-setup-osm-oauth-20","title":"1. Setup OSM OAuth 2.0","text":"<p>The FMTM uses OAuth with OSM to authenticate users.</p> <p>To properly configure your FMTM project, you will need to create keys for OSM.</p> <ol> <li> <p>Login to OSM    (If you do not have an account yet, click the signup    button at the top navigation bar to create one).</p> <p>Click the drop down arrow on the top right of the navigation bar  and select My Settings.</p> </li> <li> <p>Register your FMTM instance to OAuth 2 applications.</p> <p>Put your login redirect url as <code>http://127.0.0.1:7051/osmauth/</code> if running locally,  or for production replace with https://{YOUR_DOMAIN}/osmauth/</p> <p>Note: <code>127.0.0.1</code> is required for debugging instead of <code>localhost</code> due to OSM restrictions.</p> <p></p> </li> <li> <p>Only the read user preferences permission is required as of now.</p> </li> <li> <p>Now save your Client ID and Client Secret for the next step.</p> </li> </ol>"},{"location":"INSTALL/#2-create-an-env-file","title":"2. Create an <code>.env</code> File","text":"<p>Environmental variables are used throughout this project. To get started, create <code>.env</code> file in the top level dir, a sample is located at <code>.env.example</code>.</p> <p>This can be created interactively by running:</p> <pre><code>bash scripts/gen-env.sh\n</code></pre> <p>Note: If extra cors origins are required for testing, the variable <code>EXTRA_CORS_ORIGINS</code> is a set of comma separated strings, e.g.: http://fmtm.localhost:7050,http://some.other.domain</p>"},{"location":"INSTALL/#start-the-api-with-docker","title":"Start the API with Docker","text":"<p>This is the easiest way to get started with FMTM.</p> <p>Docker runs each service inside containers, fully isolated from your host operating system.</p>"},{"location":"INSTALL/#select-the-install-type","title":"Select the install type","text":"<p>Determine the what type of FMTM install you would like:</p> <pre><code>main - the latest production\nstaging - the latest staging\ndevelopment - the latest development (warning: may be unstable)\nlocal test - used during development, or to start a test version\n</code></pre> <p>The corresponding docker-compose files are:</p> <pre><code>main - docker-compose.main.yml\nstaging - docker-compose.staging.yml\ndevelopment - docker-compose.development.yml\nlocal test - docker-compose.yml\n</code></pre> <p>Set your selection to a terminal variable to make the next step easier:</p> <pre><code>export GIT_BRANCH={your_selection}\n\n# E.g.\nexport GIT_BRANCH=development\n</code></pre>"},{"location":"INSTALL/#pull-the-images","title":"Pull the Images","text":"<pre><code>docker compose -f \"docker-compose.${GIT_BRANCH}.yml\" pull\n</code></pre> <p>This will pull the latest containers for the branch you selected.</p>"},{"location":"INSTALL/#build-the-frontend","title":"Build the Frontend","text":"<p>Before we can run, you need to build your version of the frontend.</p> <p>This is because the frontend contains variable specific to your deployment.</p> <pre><code>docker compose -f \"docker-compose.${GIT_BRANCH}.yml\" build ui\n</code></pre>"},{"location":"INSTALL/#start-the-containers","title":"Start the Containers","text":"<pre><code>docker compose -f \"docker-compose.${GIT_BRANCH}.yml\" up -d\n</code></pre> <p>You should see the containers start up in order.</p> <p>Once complete, you should now be able to navigate to the project in your browser:</p> <pre><code>https://{YOUR_DOMAIN}\n\n# For the local test setup, this will be\nhttp://fmtm.localhost:7050\n</code></pre> <p>Note: If those link doesn't work, check the logs with <code>docker compose logs api</code>.</p> <p>Note: Use <code>docker ps</code> to view all container names.</p>"},{"location":"INSTALL/#setup-odk-central-user-optional","title":"Setup ODK Central User (Optional)","text":"<p>The FMTM uses ODK Central to store ODK data.</p> <ul> <li>By default, the docker setup includes a Central server.</li> <li>The credentials should have been provided in your <code>.env</code>   file to automatically create a user.</li> <li>To create a user manually:</li> </ul> <pre><code>docker compose exec central odk-cmd --email YOUREMAIL@ADDRESSHERE.com user-create\ndocker-compose exec central odk-cmd --email YOUREMAIL@ADDRESSHERE.com user-promote\n</code></pre> <p>Note: Alternatively, you may use an external Central server and user.</p>"},{"location":"INSTALL/#import-test-data-optional","title":"Import Test Data (Optional)","text":"<p>If running a local test version, test data is available to get started quickly.</p> <ul> <li>Navigate to the <code>import-test-data</code> endpoint in the API docs page:</li> </ul> <p>http://api.fmtm.localhost:7050/docs#/debug/import_test_data_debug_import_test_data_get</p> <ul> <li>Click <code>Try it out</code>, then <code>execute</code>.</li> </ul>"},{"location":"INSTALL/#check-authentication-optional","title":"Check Authentication (Optional)","text":"<p>Once you have deployed, you will need to check that you can properly authenticate.</p> <ol> <li> <p>Navigate to your frontend (e.g. <code>http://fmtm.localhost:7050</code>)</p> </li> <li> <p>Click the 'Sign In' button and follow the popup prompts.</p> </li> <li> <p>If successful, you should see your username in the header.</p> </li> <li> <p>If you see an error instead, double check your credentials and    redirect URL in the openstreetmap.org settings.</p> </li> </ol> <p>That's it, you have successfully set up FMTM!!</p>"},{"location":"INSTALL/#alternative-operating-systems","title":"Alternative Operating Systems","text":""},{"location":"INSTALL/#windows","title":"Windows","text":"<p>Windows Subsystem for Linux (WSL) can be used to run Docker.</p> <p>This will run a Linux machine inside Windows very efficiently.</p> <p>To install follow the official instructions.</p> <p>Then continue with the FMTM installation.</p>"},{"location":"INSTALL/#macos","title":"MacOS","text":"<p>Colima is recommended to run <code>docker</code> and <code>docker compose</code> commands.</p> <p>Install colima, docker, docker compose using brew:</p> <pre><code>brew install colima\nbrew install docker docker-compose\n</code></pre> <p>Then configure the docker compose plugin to work on MacOS:</p> <pre><code>mkdir -p ~/.docker/cli-plugins\n\nln -sfn $(brew --prefix)/opt/docker-compose/bin/docker-compose ~/.docker/cli-plugins/docker-compose\n</code></pre> <p>Run Colima:</p> <pre><code>colima start\n</code></pre> <p>Then continue with the FMTM installation.</p> <p>Note: only tagged backend images are multi-architecture, supporting MacOS. The regular images for fast continuous deployment are not: <code>backend:development</code>, <code>backend:staging</code>, <code>backend:main</code>.</p>"},{"location":"INSTALL/#a-note-on-docker-desktop","title":"A Note on Docker Desktop","text":"<p>While in theory FMTM should run using Docker-Desktop, it has not been tested.</p> <p>The authors opinion is that the official Linux Docker Daemon should be installed in WSL or MacOS, instead of using Docker Desktop.</p> <p>Colima is a wrapper to run the Docker Daemon.</p> <p>Although Docker Desktop may have a user friendly GUI, it simply runs docker commands inside a Linux virtual machine underneath.</p> <p>It is often easier and more flexible to do this yourself. Plus it gives you access to all other other tools available in a Linux operating system!</p>"},{"location":"User-Manual-For-Project-Managers/","title":"User Manual for FMTM","text":"<p>This manual is a step by step guide for the project managers on how to get started with the Field Mapping Tasking Manager.</p> <ul> <li>User Manual for FMTM<ul> <li>Introduction</li> <li>An Overview Of FMTM In Relations With HOT, OSM and ODK</li> <li>Prerequisites</li> <li>Video Tutorial</li> <li>Steps to create a project in FMTM</li> <li>Steps to start access your project and Start mapping or a mapping campaign</li> <li>Help and Support</li> <li>Thank you</li> </ul> </li> </ul>"},{"location":"User-Manual-For-Project-Managers/#introduction","title":"Introduction","text":"<p>A Mapping Campaign refers to an organized effort of collecting data from a particular geographic area/feature and creating maps. This may involve using various mapping technologies such as; GPS, satellite imagery, or crowdsourced data. These technologies are used to gather information about the area of interest.</p> <p>Mapping campaigns can be carried out for lots of different purposes, some examples are:</p> <ul> <li>Disaster Response and Recovery</li> <li>Environmental Conservation</li> <li>Urban planning or;</li> <li>Social and Political Activism.</li> </ul> <p>They often involve collaboration between organizations like; Government Agencies, Non-profit Groups and volunteers.</p> <p>Once the data is collected, it is analyzed and processed to create detailed maps that can have a variety of use cases. These could be:</p> <ul> <li>Identifying areas of need.</li> <li>Planning infrastructure and development projects.</li> <li>Understanding the impact of environmental changes on the landscape,   etc.</li> </ul>"},{"location":"User-Manual-For-Project-Managers/#an-overview-of-fmtm-in-relations-with-hot-osm-and-odk","title":"An Overview Of FMTM In Relations With HOT, OSM and ODK","text":"<p>The Humanitarian OpenStreetMap Team (HOT) is a non-profit organization that uses open mapping data to support humanitarian and disaster response efforts around the world. The Field Mapping Task Manager (FMTM) is one of the tools that HOT used to coordinate and manage mapping projects.</p> <p>FMTM is a software tool that helps project managers to organize and manage mapping tasks. It assigns those tasks to volunteers and tracks their progress. The tool includes features for collaborative editing, data validation, and error detection. This ensures that the data collected by volunteers is accurate and reliable.</p> <p>FMTM is designed to be used in conjunction with Open Data Kit (ODK). ODK is a free and open-source set of tools that allows users to create, collect, and manage data with mobile devices. The ODK provides a set of open-source tools that allow users to build forms, collect data in the field, and aggregate data on a central server. It is commonly used for data collection in research, monitoring and evaluation, and other development projects.</p> <p>Project managers use FMTM to manage tasks and assign them to volunteers. The data collected by the volunteer via ODK is typically uploaded to OpenStreetMap (OSM) where it is used to create more detailed and accurate maps of the affected area. OSM is a free and open-source map of the world that is created and maintained by volunteers.</p> <p>Overall, the FMTM tool is an important component of HOT's efforts to support disaster response and humanitarian efforts around the world. By coordinating mapping activities and ensuring the accuracy and reliability of the data collected by volunteers, FMTM helps to provide critical information that can be used to support decision-making and improve the effectiveness of humanitarian efforts.</p>"},{"location":"User-Manual-For-Project-Managers/#prerequisites","title":"Prerequisites","text":"<ul> <li>Stable Internet connection</li> <li>Knowledge on field mapping . If you are new to mapping we suggest you to read   this .</li> <li>Account on ODK Central Server.   Here   are the instructions for setting up an ODK Central server on Digital Ocean   (it's very similar on AWS etc)</li> </ul>"},{"location":"User-Manual-For-Project-Managers/#video-tutorial","title":"Video Tutorial","text":"<p>https://github.com/hotosm/fmtm/assets/97789856/6ad200e7-3af9-418b-bb6e-6666bbab9a15</p> <p>https://github.com/hotosm/fmtm/assets/97789856/62646dd8-6130-4612-99fe-4df29ae432d9</p> <p>https://github.com/hotosm/fmtm/assets/97789856/8677062c-981c-4ea3-964f-3348c4953f82</p> <p>https://github.com/hotosm/fmtm/assets/97789856/02355809-2f40-470c-856f-afe56250883f</p> <p>https://github.com/hotosm/fmtm/assets/97789856/084ce707-95ba-4d51-a650-132be84fbe68</p> <p>https://github.com/hotosm/fmtm/assets/97789856/6711badb-c93e-4109-9090-0ad1f1554699</p> <p>https://github.com/hotosm/fmtm/assets/97789856/b2af3c7d-5392-4e10-bf83-853b2f517c9a</p> <p>https://github.com/hotosm/fmtm/assets/97789856/d8b2bf72-e8e0-41bc-a568-77854f45efa6</p>"},{"location":"User-Manual-For-Project-Managers/#steps-to-create-a-project-in-fmtm","title":"Steps to create a project in FMTM","text":"<ol> <li>Go to fmtm .</li> <li> <p>In the header, you'll find three tabs: Explore Projects, Manage Organization,    and Manage Categories.</p> <p></p> </li> <li> <p>Start by exploring the projects listed by different nations and world    communities for field mapping exercises.</p> </li> <li> <p>Use the filters or search option to narrow down the project cards based on    your preferences.</p> <p></p> </li> <li> <p>If you are not logged into the system, the \"Create new project\" button will    be disabled.</p> </li> <li>If you are new then on the top right cornor click on Sign up and create an    account . Else , Sign in to your existing account .</li> <li>Once signed in, the \"Create new project\" button will be enabled. Click on it.</li> <li>The process of creating a new project involves four steps: Project Details,    Uploading the Area, Defining the Task, and Selecting the Form.</li> <li> <p>Start by filling in the project details, including the organization name,    project name, description, and other relevant information.</p> <p></p> </li> <li> <p>If your organization's name is not listed, you can add it through the     \"Manage Organization\" tab.</p> </li> <li>Provide the necessary credentials for the ODK (Open Data Kit) central setup,     including URL, username, and password.</li> <li> <p>Proceed to the next step, which is uploading the area for field mapping.     Choose the file option and select the AOI (Area of Interest) file in GEOJSON     file format.     Review the displayed map that corresponds to your selected area and click     on \"Next\".</p> <p></p> </li> <li> <p>Define the tasks of the project.</p> <p></p> <p>If you choose \"Divide on Square,\" specify the dimensions of the square tasks.</p> <p>Click on \"Next\" to proceed.</p> <p></p> </li> <li> <p>Select Form . Select the form category you want to use for the field     mapping, such as \"Data Extract\" or any other relevant category.</p> <p>Choose a specific form from the existing categories or upload a custom form   if needed.   Click on \"Submit\" to proceed.</p> <p></p> </li> <li> <p>Wait for the system to generate QR codes for each task, which will be used     later in the field mapping process.</p> </li> <li>After the QR codes are generated, you can find your project in the project     dashboard.</li> </ol>"},{"location":"User-Manual-For-Project-Managers/#steps-to-start-access-your-project-and-start-mapping-or-a-mapping-campaign","title":"Steps to start access your project and Start mapping or a mapping campaign","text":"<ol> <li>Go to the Explore projects tab . Click on the project card and proceed to the    next step.</li> <li> <p>Select one of the available tasks and start the field mapping exercise.</p> <p></p> </li> <li> <p>If a task is already locked by another user, choose a different task that is    available for mapping.If a task is already locked by another user, choose a    different task that is available for mapping.</p> <ul> <li> <p>The drop down icon beside LEGEND displays a color code. This    color code lets you know the status of each task on the map.</p> <ul> <li>READY means that task is available to be mapped</li> <li>LOCKED FOR MAPPING means that task is already being mapped by another    volunteer and therefore unavailable for mapping</li> <li>MAPPED or READY FOR VALIDATION means that task has been completely    mapped and ready to be validated.</li> <li>LOCKED FOR VALIDATION means that task has been mapped and being    validated.</li> <li>VALIDATED means that task has successfully been validated and completely    mapped with no errors</li> <li>INVALIDATED or MORE MAPPING NEEDED means that task did not pass the    validation process and needs more mapping</li> <li>BAD means that task is not clear and cannot be mapped</li> </ul> </li> </ul> <p>Note: 'task' refers to each section of the map enclosed in the dotted lines and each task has a corresponding number tag.</p> <p></p> <ul> <li>To begin mapping, click on a task closest to you that has the color    code associated with READY and change it's status from READY    to LOCKED FOR MAPPING. Remember to take note of the number tag.</li> <li>Scroll to the bottom of the page. The ACTIVITIES tab shows the    tasks either LOCKED FOR MAPPING, BAD or LOCKED FOR    VALIDATION. You can search for tasks with the status mentioned    using the number tag associated with each task.</li> </ul> </li> <li> <p>Use the QR code to start mapping the selected task using the ODK Collect app    on your mobile phone.</p> </li> <li>Install and open the ODK Collect app on your phone.</li> <li>Set up the project details by scanning the QR code provided.</li> <li>Once the project is set up in the app, start a new form based on the selected    form from the project setup.</li> <li>Fill in the questionnaires and collect data for the field mapping exercise.</li> <li>Save and send the completed form to the server.</li> <li>After completing the assigned task, go back to the project platform on FMTM     and mark it as fully mapped.</li> </ol>"},{"location":"User-Manual-For-Project-Managers/#help-and-support","title":"Help and Support","text":"<p>If you encounter any issues or need assistance while using FMTM, you can access the following resources:</p> <ul> <li>Check the FAQs .</li> <li>Ask your doubts in the Slack channel: #fmtm-field-pilots</li> </ul>"},{"location":"User-Manual-For-Project-Managers/#thank-you","title":"Thank you","text":"<p>We are excited to have you join our community of passionate mappers and volunteers. FMTM is a powerful platform developed by the Humanitarian OpenStreetMap Team (HOT) to facilitate mapping projects for disaster response, humanitarian efforts, and community development.</p> <p>With FMTM, you have the opportunity to make a real impact by mapping areas that are in need of support. Your contributions help create detailed and up-to-date maps that aid organizations and communities in their efforts to respond to crises, plan infrastructure, and improve the lives of people around the world.</p> <p>Whether you are a seasoned mapper or new to the world of mapping, FMTM provides a user-friendly interface and a range of tools to make your mapping experience smooth and rewarding. You can create tasks, collaborate with other volunteers, and contribute to ongoing projects that align with your interests and expertise.</p> <p>By mapping with FMTM, you are joining a global community of dedicated individuals who share a common goal of using open data to make a positive difference. Together, we can create a more resilient and inclusive world.</p> <p>Explore the projects, join tasks, and contribute your skills to help us build accurate and comprehensive maps. Don't hesitate to ask questions, seek guidance, and engage with fellow mappers through our forums and communication channels.</p> <p>Thank you for being part of FMTM. Your mapping efforts are invaluable, and we appreciate your commitment to making a difference.</p> <p>Happy mapping!</p> <p>The FMTM Team</p>"},{"location":"wiki_redirect/","title":"FMTM","text":"<p>Please see the docs page at: https://hotosm.github.io/fmtm/</p>"},{"location":"dev/Backend/","title":"Backend Deployment for Development","text":"<p>The recommended way to run FMTM is with Docker.</p> <p>You can also develop on your local machine outside of Docker, see below.</p> <p>NOTE: If you haven't yet downloaded the Repository and setup your environment variables, please check the Getting Started wiki page.</p> <p>Now let's get started </p>"},{"location":"dev/Backend/#1-start-the-api-with-docker","title":"1. Start the API with Docker","text":"<p>The easiest way to get up and running is by using the FMTM Docker deployment. Docker creates a virtual environment, isolated from your computer's environment, installs all necessary dependencies, and creates a container for each the database, the api, and the frontend. These containers talk to each other via the URLs defined in the docker-compose file and your env file.</p>"},{"location":"dev/Backend/#1a-starting-the-containers","title":"1A: Starting the Containers","text":"<ol> <li>You will need to    Install Docker    and ensure that it is running on your local machine.</li> <li>From the command line: navigate to the top level directory    of the FMTM project.</li> <li>From the command line run: <code>docker-compose pull</code>.    This will pull the latest container builds from main branch.</li> <li>Make sure you have a <code>.env</code> file with all required variables, see    Getting Started.</li> <li>Once everything is pulled, from the command line run:    <code>docker compose up -d api</code></li> <li>If everything goes well you should now be able to    navigate to the project in your browser: <code>http://api.fmtm.localhost:7050/docs</code></li> </ol> <p>Note: If that link doesn't work, check the logs with <code>docker compose logs api</code>. Note: the database host <code>fmtm-db</code> is automatically resolved by docker compose to the database container IP.</p>"},{"location":"dev/Backend/#bundled-odk-central","title":"Bundled ODK Central","text":"<ul> <li>FMTM uses ODK Central to store ODK data.</li> <li>To facilitate faster development, the Docker setup includes a Central server.</li> <li>The credentials are provided via the <code>.env</code> file.</li> </ul> <p>Alternatively, you may provide credentials to an external Central server in the <code>.env</code>.</p> <p>To run the local development setup without ODK Central (use external server):</p> <pre><code>dc --profile no-odk up -d\n</code></pre>"},{"location":"dev/Backend/#1b-import-test-data","title":"1B: Import Test Data","text":"<p>Some test data is available to get started quickly.</p> <ol> <li>Navigate to the <code>import-test-data</code> endpoint in the API docs page:    http://api.fmtm.localhost:7050/docs#/debug/import_test_data_debug_import_test_data_get</li> <li>Click <code>Try it out</code>, then <code>execute</code>.</li> </ol>"},{"location":"dev/Backend/#2-start-the-api-without-docker","title":"2. Start the API without Docker","text":"<p>To run FMTM without Docker, you will need to start the database, then the API.</p>"},{"location":"dev/Backend/#2a-starting-the-database","title":"2A: Starting the Database","text":""},{"location":"dev/Backend/#option-1-run-the-database-only-in-docker","title":"Option 1: Run the Database (only) in Docker","text":"<p>Running the database in Docker means postgres does not need to be installed on your local machine.</p> <ol> <li>You will need to    Install Docker    and ensure that it is running on your local machine.</li> <li>Start an instance of Postgres (with Postgis):</li> </ol> <pre><code>docker compose up -d fmtm-db\n</code></pre> <p>The database should be accessible at localhost:5438.</p> <p>Note: if port 5438 is already taken, then change the <code>-p ANY_PORT:5432</code> declaration.</p>"},{"location":"dev/Backend/#option-2-run-the-database-locally","title":"Option 2: Run the database locally","text":"<p>For advanced users, it is also possible to run a postgresql/postgis database locally, however you will need to set it up yourself and make it accessible on a port.</p>"},{"location":"dev/Backend/#2b-starting-the-api","title":"2B. Starting the API","text":"<p>After starting the database, from the command line:</p> <ol> <li>Navigate to the top level directory of the FMTM project.</li> <li>Install PDM with: <code>pip install pdm</code></li> <li>Install backend dependencies with PDM: <code>pdm install</code></li> <li>Run the Fast API backend with:    <code>pdm run uvicorn app.main:api --host 0.0.0.0 --port 8000</code></li> </ol> <p>The API should now be accessible at: http://api.fmtm.localhost:7050/docs</p>"},{"location":"dev/Backend/#3-hybrid-dockerlocal","title":"3. Hybrid Docker/Local","text":"<ul> <li>It is not recommended to run FMTM in a container while   using a local database on your machine.</li> <li>It is possible, but complicates the docker networking slightly.</li> <li>The FMTM container cannot see the local machine's   <code>localhost</code>, so we need a workaround.</li> <li>Option 1: add <code>network_mode: \"host\"</code> under the <code>api:</code>   service in the docker-compose.yml file.</li> <li>Option 2: use the direct container IP address for the   database for FMTM_DB_HOST, found via <code>docker inspect fmtm_db</code>.</li> </ul>"},{"location":"dev/Backend/#backend-tips","title":"Backend Tips","text":""},{"location":"dev/Backend/#implement-authorization-on-an-endpoints","title":"Implement authorization on an endpoints","text":"<p>To add authentication to an endpoint, import <code>login_required</code> from <code>auth</code> module, you can use it as a decorator or use fastapi <code>Depends(login_required)</code> on endpoints.</p>"},{"location":"dev/Backend/#database-migration","title":"Database Migration","text":""},{"location":"dev/Backend/#creating-migration-files","title":"Creating Migration Files","text":"<ul> <li>Migrations can be written to <code>src/backend/migrations</code>.</li> <li>Each file must be an SQL script that is:<ul> <li>Idempotent: can be run multiple times without consequence.</li> <li>Atomic: Run within a BEGIN/COMMIT transaction.</li> </ul> </li> <li>Migrations must also include an equivalent revert migration under:   <code>src/backend/migrations/revert</code></li> </ul>"},{"location":"dev/Backend/#applying-migrations","title":"Applying Migrations","text":"<ul> <li>Should occur automatically as part of the docker   compose stack (migration service).</li> <li>To run manually:</li> </ul> <pre><code>docker compose up -d migrations\n</code></pre>"},{"location":"dev/Backend/#type-checking","title":"Type Checking","text":"<ul> <li>It is a good idea to have your code 'type checked' to avoid potential   future bugs.</li> <li>To do this, install <code>pyright</code> (VSCode has an extension).</li> <li>You may need to add the backend dependencies to <code>extraPaths</code>. In VSCode   your settings.json would include:</li> </ul> <pre><code>{\n  \"python.analysis.extraPaths\": [\"src/backend/__pypackages__/3.10/lib/\"]\n}\n</code></pre>"},{"location":"dev/Backend/#backend-debugging","title":"Backend Debugging","text":"<ul> <li>The <code>docker-compose.yml</code> builds FMTM using the <code>debug</code> target in the Dockerfile.</li> <li>The debug image contains <code>debugpy</code> to assist debugging in the container.</li> </ul> <p>To use it:</p> <ol> <li>Re-build the docker image <code>docker compose build api</code></li> <li> <p>Uncomment the debug port in docker-compose.yml:</p> <pre><code>services:\n  ...\n  api:\n    ...\n    ports:\n      - \"7052:8000\"\n    #   - \"5678:5678\" # Debugger port\n</code></pre> </li> <li> <p>Start the docker container <code>docker compose up -d api</code></p> </li> <li>Connect to the debugger on port 5678.</li> </ol> <p>You can configure your IDE to do this with the build in debugger.</p> <p>Example launch.json config for vscode:</p> <pre><code>{\n  \"configurations\": [\n    {\n      \"name\": \"Remote - Server Debug\",\n      \"type\": \"python\",\n      \"request\": \"attach\",\n      \"host\": \"localhost\",\n      \"port\": 5678,\n      \"pathMappings\": [\n        {\n          \"localRoot\": \"${workspaceFolder}/src/backend/app\",\n          \"remoteRoot\": \"/opt/app\"\n        }\n      ],\n      \"justMyCode\": false\n    }\n  ]\n}\n</code></pre> <p>Note: either port 5678 needs to be bound to your localhost (default), or the <code>host</code> parameter can be set to the container IP address.</p>"},{"location":"dev/Backend/#backend-testing","title":"Backend Testing","text":"<p>To run the backend tests locally, run:</p> <pre><code>docker compose run --rm api pytest\n</code></pre> <p>To assess coverage of tests, run:</p> <pre><code>docker compose run --rm --entrypoint='sh -c' api \\\n  'coverage run -m pytest &amp;&amp; coverage report -m'\n</code></pre> <p>To assess performance of endpoints:</p> <ul> <li>We can use the pyinstrument profiler.</li> <li>While in debug mode (DEBUG=True), access any endpoint.</li> <li>Add the <code>?profile=true</code> arg to the URL to view the execution time.</li> </ul>"},{"location":"dev/Backend/#using-the-local-version-of-odk-central","title":"Using the local version of ODK Central","text":"<ul> <li>During project creation a Central ODK URL must be provided.</li> <li>If you set up FMTM with docker and have ODK Central   running in a container, you can use the URL:   <code>https://proxy</code></li> <li>The credentials should be present in your <code>.env</code> file.</li> </ul>"},{"location":"dev/Backend/#debugging-osm-fieldwork","title":"Debugging osm-fieldwork","text":"<p><code>osm-fieldwork</code> is an integral package for much of the functionality in FMTM.</p> <p>Creating a new release during development may not always be feasible.</p> <ul> <li>A development version of osm-fieldwork can be mounted into   the FMTM container via bind mount.</li> <li>Clone the osm-fieldwork repo to the same root directory as FMTM.</li> <li>Uncomment the line in docker-compose.yml</li> </ul> <pre><code>- ../osm-fieldwork/osm_fieldwork:/home/appuser/.local/lib/python3.10/site-packages/osm_fieldwork\n</code></pre> <ul> <li>Run the docker container with your local version of osm-fieldwork.</li> <li>Code changes to osm-fieldwork should be reflected immediately.   If they are not, run:   <code>docker compose restart api</code>.</li> </ul> <p>Note: this is useful for debugging features during active development.</p>"},{"location":"dev/Backend/#accessing-s3-files-use-s3fs","title":"Accessing S3 Files use s3fs","text":"<p>The s3fs tool allows you to mount an S3 bucket on your filesystem, to browse like any other directory.</p> <p>Install:</p> <pre><code>sudo apt update\nsudo apt install s3fs\n</code></pre> <p>Create a credentials file:</p> <pre><code># Replace ACCESS_KEY_ID and SECRET_ACCESS_KEY\necho ACCESS_KEY_ID:SECRET_ACCESS_KEY &gt; ${HOME}/.passwd-s3fs\nchmod 600 ${HOME}/.passwd-s3fs\n</code></pre> <p>Mount your bucket:</p> <p>If you wish for this to be permanent, see below.</p> <pre><code>sudo mkdir /mnt/fmtm/local\nsudo chown $(whoami):$(whoami) /mnt/fmtm/local\ns3fs fmtm-data /mnt/fmtm/local \\\n  -o passwd_file=/home/$(whoami)/s3-creds/fmtm-local \\\n  -o url=http://s3.fmtm.localhost:7050 \\\n  -o use_path_request_style\n</code></pre> <p>Access the files like a directory under: <code>/mnt/fmtm/local</code>.</p> <p>To mount permanently, add the following to <code>/etc/fstab</code>:</p> <p><code>fmtm-data /mnt/fmtm/local fuse.s3fs _netdev,allow_other,\\ use_path_request_style,passwd_file=/home/USERNAME/s3-creds/fmtm-local,\\ url=http://s3.fmtm.localhost:7050 0 0</code></p> <p>Note: you should replace USERNAME with your linux username.</p>"},{"location":"dev/Backend/#running-josm-in-the-dev-stack","title":"Running JOSM in the dev stack","text":"<ul> <li>Run JOSM with FMTM:</li> </ul> <pre><code>docker compose \\\n  -f docker-compose.yml \\\n  -f josm/docker-compose.yml \\\n  up -d\n</code></pre> <p>This adds JOSM to the docker compose stack for local development. Access the JOSM Remote API: http://localhost:8111 Access the JOSM GUI in browser: http://localhost:8112</p> <p>You can now call the JOSM API from FMTM and changes will be reflected in the GUI.</p>"},{"location":"dev/Backend/#conclusion","title":"Conclusion","text":"<p>Running the FMTM project is easy with Docker. You can also run the project locally outside of Docker, but it requires more setup. The frontend is built with React and Typescript, and the backend is built with FastAPI. Use the tips provided to customize and extend the functionality of the project.</p>"},{"location":"dev/Database-Tips/","title":"Database Tips","text":""},{"location":"dev/Database-Tips/#access-the-database-psql","title":"Access the database (psql)","text":""},{"location":"dev/Database-Tips/#option-1","title":"Option 1","text":"<p>Access the database container using psql on your local machine:</p> <pre><code>psql -d fmtm -U fmtm -h localhost\n</code></pre>"},{"location":"dev/Database-Tips/#option-2","title":"Option 2","text":"<p>Access a PostgreSQL shell inside the fmtm-db container:</p> <pre><code>GIT_BRANCH=development\n\ndocker exec -it fmtm-${GIT_BRANCH}-fmtm-db-1 psql -U fmtm fmtm\n</code></pre> <p>And then connect to the database using this command:</p> <pre><code>\\c fmtm\n</code></pre>"},{"location":"dev/Database-Tips/#a-few-helpful-psql-commands","title":"A few helpful psql commands","text":"<ul> <li>You can list all the databases using the command:</li> </ul> <pre><code>\\l\n</code></pre> <ul> <li>To list all the schemas of the currently connected database, use the command:</li> </ul> <pre><code>\\dn\n</code></pre> <ul> <li>To list all the functions in the current database, use the command:</li> </ul> <pre><code>\\df\n</code></pre> <ul> <li>To list all the views in the current database, use the command:</li> </ul> <pre><code>\\dv\n</code></pre> <ul> <li>To list all the users and roles, use the command:</li> </ul> <pre><code>\\du\n</code></pre> <ul> <li>To list all the tables in the current database, use the command:</li> </ul> <pre><code>\\dt\n</code></pre> <ul> <li>To describe a table, use the command:</li> </ul> <pre><code>\\d table_name\n</code></pre> <p>Replace \"table_name\" with the name of the table you want to describe.</p> <ul> <li>To execute the last command again, use the command:</li> </ul> <pre><code>\\g\n</code></pre> <ul> <li>To view your command history, use the command:</li> </ul> <pre><code>\\s\n</code></pre> <ul> <li>To save your command history to a file, use the command:</li> </ul> <pre><code>\\s filename\n</code></pre> <p>Replace \"filename\" with the name of the file you want to save the command history to.</p> <ul> <li>To execute commands from a file, use the command:</li> </ul> <pre><code>\\i filename\n</code></pre> <p>Replace \"filename\" with the name of the file containing the commands you want to execute.</p> <ul> <li>To view a list of all psql commands, use the command:</li> </ul> <pre><code>\\?\n</code></pre> <ul> <li>To view help for a specific command, use the command:</li> </ul> <pre><code>\\h command_name\n</code></pre> <p>Replace \"command_name\" with the name of the command you want help with.</p> <ul> <li>To exit psql, use the command:</li> </ul> <pre><code>\\q\n</code></pre> <p>Note: If you make a change, don't forget to commit the change!</p>"},{"location":"dev/Database-Tips/#migrations","title":"Migrations","text":"<ul> <li>Migrations are a way to manage changes to the database schema over time.</li> <li>They are handled automatically by a management script when FMTM starts up.</li> <li>Individual SQL migration scripts are placed in the <code>src/backend/migrations</code> dir.<ul> <li>These should be idempotent, i.e. can run over and over without causing errors.</li> <li>There should also be a commented out SQL script for how to revert the migration.</li> <li>Scripts should be named sequentially,   i.e. the first is 001-some-migration.sql,   then they increment by one.</li> <li>Example <code>000-remove-user-password.sql</code>:</li> </ul> </li> </ul> <pre><code>-- ## Migration to remove password field from public.users (replaced with OSM OAuth)\n\n\n-- ## Apply Migration\n-- Start a transaction\nBEGIN;\n-- Drop the 'password' column if it exists\nALTER TABLE IF EXISTS public.users\nDROP COLUMN IF EXISTS password;\n-- Commit the transaction\nCOMMIT;\n\n\n-- ## Revert Migration (comment above, uncomment below)\n-- -- Start a transaction\n-- BEGIN;\n-- -- Add the 'password' column back if it doesn't exist\n-- ALTER TABLE public.users\n-- ADD COLUMN IF NOT EXISTS password character varying;\n-- -- Commit the transaction\n-- COMMIT;\n</code></pre> <ul> <li>When the docker compose stack starts,   an additional container starts up and runs a bash script once.</li> <li>The script generates a table called <code>migrations</code>,   which simply tracks the script name and execution date.</li> <li>The <code>migrations</code> directory is scanned for new files,   and if there is no record in the database of being applied,   the migration is applied.</li> </ul>"},{"location":"dev/Database-Tips/#running-migrations-manually","title":"Running Migrations Manually","text":"<p>If for any reason you need to run migrations manually, there are a few options:</p>"},{"location":"dev/Database-Tips/#restart-the-migrations-container","title":"Restart the migrations container","text":"<pre><code>docker compose restart migrations\n</code></pre>"},{"location":"dev/Database-Tips/#run-the-migration-script-in-docker","title":"Run the migration script in docker","text":"<p>This runs inside the backend container:</p> <pre><code>docker compose exec api bash /migrate-entrypoint.sh`\n</code></pre>"},{"location":"dev/Database-Tips/#run-the-migration-script-directly","title":"Run the migration script directly","text":"<p>Make sure you have the 4 env vars for the database connection set on your machine, then run the migration script directly:</p> <pre><code>bash src/backend/migrate-entrypoint.sh\n</code></pre>"},{"location":"dev/Deployment-Flow/","title":"Deployment Flow","text":"<p>These stages go in order, from local development, through to production deployment.</p>"},{"location":"dev/Deployment-Flow/#local-development","title":"Local Development","text":"<ul> <li>Devs develop features on their local instance.</li> <li>Use <code>docker-compose.yml</code> setup for testing.</li> <li>Once feature and testing complete, make a PR to the <code>development</code> branch.</li> </ul>"},{"location":"dev/Deployment-Flow/#development-deployment","title":"Development Deployment","text":"<ul> <li>Once a PR is approved, it is merged to <code>development</code>.</li> <li>This triggers a workflow to automatically deploy the code changes on the dev server.</li> <li>The purpose of this stage is for fast CI,   i.e. the developer sees their code in action quickly.</li> </ul>"},{"location":"dev/Deployment-Flow/#staging-deployment","title":"Staging Deployment","text":"<ul> <li>At a set interval (approx bi-weekly),   the updates made on <code>development</code> and frozen, tested,   patched (if required), and merged into the <code>staging</code> branch via PR.</li> <li>Once approved, the <code>staging</code> branch auto-deploys to the staging server.</li> <li>The purpose of this stage is to reguarly release versions of FMTM that   power users (and the project owner) can test.</li> <li>Anyone who doesn't mind occasional breakage is welcome to use this server publically.</li> <li>Hot fixes are also possible, if fixing some   functionality is critical for FMTM to function.</li> </ul>"},{"location":"dev/Deployment-Flow/#production-deployment","title":"Production Deployment","text":"<ul> <li>The staging server instance is thoroughly tested   by the product owner, and bug reports filed.</li> <li>The release is hardened into longer interval (approx bi-monthly) production releases.</li> <li>A PR is made from <code>staging</code> to <code>main</code> branch.</li> <li>Once approved and the code merged, a Github release is made.</li> <li>A release is available on Github,   including all relevant release notes for what has been updated.</li> <li>The release will trigger the workflow to deploy to the production server.</li> </ul>"},{"location":"dev/Deployment-Flow/#other-feature-demo-releases","title":"Other: Feature Demo Releases","text":"<ul> <li>A feature demo release is a throwaway instance of FMTM with a particular purpose.</li> <li>Functionality is developed here for various reasons:<ul> <li>Specific updates for a single project that won't be used elsewhere.</li> <li>Very fast updating of the server,   without interfering with the typical release flow.</li> </ul> </li> <li>The key point is that these branch instances are single use   and will be shut down once the project has ended.</li> <li>The easiest approach is probably to:<ul> <li>Create and login to a server.</li> <li>Run the bundled <code>feature-demo.sh</code> install script.</li> </ul> </li> <li>Alternatively, a workflow can be made to auto-deploy:<ul> <li>Triggering on a branch naming convention: <code>feature-demo/some-feature</code>.</li> <li>The user will have to enter an SSH key into the Gitlab secrets.</li> <li>The workflow will deploy to the server remotely   when the branch is pushed to.</li> <li>This approach is less preferred, as the user   requires write access to the Github repo,   but is under consideration.</li> </ul> </li> </ul>"},{"location":"dev/Frontend/","title":"Frontend Deployment for Development","text":""},{"location":"dev/Frontend/#1-start-the-frontend-with-docker","title":"1. Start the Frontend with Docker","text":"<p>This is the easiest way to manage all of the services together.</p>"},{"location":"dev/Frontend/#1a-starting-the-api-containers","title":"1A: Starting the API Containers","text":"<p>For details on how to run the API first, please see: Backend Docs</p>"},{"location":"dev/Frontend/#1b-starting-the-frontend-containers","title":"1B: Starting the Frontend Containers","text":"<ol> <li>You will need to Install Docker    and ensure that it is running on your local machine.</li> <li>From the command line: navigate to the top level directory of the FMTM project.</li> <li>From the command line run: <code>docker compose build ui</code>    This is essential, as the development container for the frontend is    different to production.</li> <li> <p>Once everything is built, from the command line run: <code>docker compose up -d ui</code></p> </li> <li> <p>If everything goes well you should now be able to    navigate to the project in your browser: http://fmtm.localhost:7050</p> </li> </ol> <p>Note: during development, if you rebuild the frontend, then run 'docker compose up -d', the node_modules directory may not be updated. To solve this, use the flag: --renew-anon-volumes on docker compose up.</p>"},{"location":"dev/Frontend/#2-start-the-frontend-locally","title":"2. Start the Frontend locally","text":""},{"location":"dev/Frontend/#2a-navigate-to-the-frontend-subdirectory","title":"2A: Navigate to the frontend subdirectory","text":"<p><code>cd src/frontend</code></p>"},{"location":"dev/Frontend/#2b-install-dependencies","title":"2B: Install dependencies","text":"<p><code>npm install</code></p>"},{"location":"dev/Frontend/#2c-run-the-project","title":"2C. Run the project","text":"<p>Run the frontend with hot-reloading: <code>npm run start:live</code></p> <p>The frontend should now be accessible at: <code>http://127.0.0.1:&lt;PORT_NUMBER&gt;</code></p>"},{"location":"dev/Frontend/#frontend-tips","title":"Frontend Tips","text":"<p>The frontend is built with React and Typescript. Here are some tips on how to work with the frontend:</p>"},{"location":"dev/Frontend/#adding-environment-variables","title":"Adding Environment Variables","text":"<p>To add environment variables, create a .env.local file in the <code>src/frontend</code> directory. Any variables defined here will override those in <code>.env</code>.</p>"},{"location":"dev/Frontend/#adding-new-routes","title":"Adding New Routes","text":"<p>To add a new route, create a new page in the src/frontend/pages directory. Then add a new entry to the <code>src/frontend/router.tsx</code> file.</p>"},{"location":"dev/Frontend/#adding-new-components","title":"Adding New Components","text":"<p>To add a new component, create a new .tsx file in the src/frontend/ components directory.</p>"},{"location":"dev/Frontend/#conclusion","title":"Conclusion","text":"<p>Running the FMTM project is easy with Docker. You can also run the project locally outside of Docker, but it requires more setup. The frontend is built with React and Typescript, and the backend is built with FastAPI. Use the tips provided to customize and extend the functionality of the project.</p>"},{"location":"dev/Production/","title":"Deployment for Production","text":"<p>The following instructions are needed to set up FMTM for production on your own cloud server.</p>"},{"location":"dev/Production/#set-up-the-fmtm-on-a-cloud-server","title":"Set up the FMTM on a cloud server","text":""},{"location":"dev/Production/#set-up-a-server-and-domain-name","title":"Set up a server and domain name","text":"<ul> <li>Get a cloud server (tested with Ubuntu 22.04).</li> <li>Set up a domain name, and point the DNS to your cloud server.</li> <li>SSH into your server. Set up a user with sudo called   svcfmtm. this   is a good guide for basic server setup including creation of a   user.</li> </ul>"},{"location":"dev/Production/#run-the-install-script","title":"Run the install script","text":"<pre><code>curl -L https://get.fmtm.dev -o install.sh\nbash install.sh\n\n# Then follow the prompts\n</code></pre>"},{"location":"dev/Production/#additional-environment-variables","title":"Additional Environment Variables","text":"<p>Variables are set in <code>.env</code>. Some can be updated manually, as required.</p>"},{"location":"dev/Production/#extra_cors_origins","title":"EXTRA_CORS_ORIGINS","text":"<p>If extra cors origins are required for testing, the variable <code>EXTRA_CORS_ORIGINS</code> is a set of comma separated strings, e.g.: http://fmtm.localhost:7050,http://some.other.domain</p>"},{"location":"dev/Production/#api_prefix","title":"API_PREFIX","text":"<p>It is also possible to use the API_PREFIX variable if the api is served under, e.g. /api on the domain. However, this isn't the recommended approach, and testing is minimal.</p>"},{"location":"dev/Production/#s3_access_key-s3_secret_key","title":"S3_ACCESS_KEY &amp; S3_SECRET_KEY","text":"<p>In most circumstances these variables should be provided to authenticate with your S3 provider. However, some providers (such as AWS), allow for <code>instance profiles</code> to be attached to your server, with required permissions preconfigured. By default connections made from the EC2 instance with attached <code>instance profile</code> will be automatically authenticated. S3_ACCESS_KEY and S3_SECRET_KEY should be set to blank strings in this case <code>=\"\"</code>.</p>"},{"location":"dev/Production/#odk_-variables","title":"ODK_ Variables","text":"<p>These can point to an externally hosted instance of ODK Central.</p> <p>Or ODK Central can be started as part of the FMTM docker compose stack, and variables should be set accordingly.</p>"},{"location":"dev/Production/#other-domains","title":"Other Domains","text":"<p>If you run FMTM with ODK and Minio (S3) included, then the domains will default to:</p> <pre><code>${FMTM_DOMAIN} --&gt; Frontend\napi.${FMTM_DOMAIN} --&gt; Backend\nodk.${FMTM_DOMAIN} --&gt; ODK Central\ns3.${FMTM_DOMAIN} --&gt; S3 / Minio\n</code></pre> <p>These defaults can be overriden with respective environment variables:</p> <pre><code>FMTM_API_DOMAIN\nFMTM_ODK_DOMAIN\nFMTM_S3_DOMAIN\n</code></pre>"},{"location":"dev/Production/#connecting-to-a-remote-database","title":"Connecting to a remote database","text":"<ul> <li>A database may be located on a headless Linux server in the cloud.</li> <li>To access the database via GUI tool such as PGAdmin,   it is possible using port tunneling.</li> </ul> <pre><code>ssh username@server.domain -N -f -L {local_port}:localhost:{remote_port}\n\n# Example\nssh root@fmtm.hotosm.org -N -f -L 5430:localhost:5433\n</code></pre> <p>This will map port 5432 on the remote machine to port 5430 on your local machine.</p>"},{"location":"dev/Production/#manual-database-backups","title":"Manual Database Backups","text":"<pre><code>GIT_BRANCH=development\nbackup_filename=\"fmtm-db-${GIT_BRANCH}-$(date +'%Y-%m-%d').sql.gz\"\necho $backup_filename\n\ndocker exec -i -e PGPASSWORD=PASSWORD_HERE \\\nfmtm-${GIT_BRANCH}-fmtm-db-1 \\\npg_dump --verbose --format c -U fmtm fmtm \\\n| gzip -9 &gt; \"$backup_filename\"\n\n# For ODK\ndocker exec -i -e PGPASSWORD=PASSWORD_HERE \\\nfmtm-${GIT_BRANCH}-central-db-1 \\\npg_dump --verbose --format c -U odk odk | \\\ngzip -9 &gt; \"$backup_filename\"\n</code></pre> <p>Note: if you are dumping to import into a pre-existing database, you should also include the --clean flag.</p> <p>This will drop the existing tables prior to import, and should prevent conflicts.</p>"},{"location":"dev/Production/#manual-database-restores","title":"Manual Database Restores","text":"<p>The restore should be as easy as:</p> <pre><code># On a different machine (else change the container name)\nGIT_BRANCH=development\nbackup_filename=fmtm-db-${GIT_BRANCH}-XXXX-XX-XX-sql.gz\n\ncat \"$backup_filename\" | gunzip | \\\ndocker exec -i -e PGPASSWORD=NEW_PASSWORD_HERE \\\nfmtm-${GIT_BRANCH}-fmtm-db-1 \\\npg_restore --verbose -U fmtm -d fmtm\n\n# For ODK\ncat \"$backup_filename\" | gunzip | \\\ndocker exec -i -e PGPASSWORD=NEW_PASSWORD_HERE \\\nfmtm-${GIT_BRANCH}-central-db-1 \\\npg_restore --verbose -U odk -d odk\n</code></pre> <p>However, in some cases you may have existing data in the database (i.e. if you started the docker compose stack &amp; the API ran the migrations!).</p> <p>In this case you can import into a fresh db, before attaching to the FMTM containers:</p> <pre><code>export GIT_BRANCH=development\n\n# Shut down the running database &amp; delete the data\ndocker compose -f docker-compose.$GIT_BRANCH.yml down -v\n\n# First, ensure you have a suitable .env with database vars\n# Start the databases only\ndocker compose -f docker-compose.$GIT_BRANCH.yml up -d fmtm-db central-db\n\n# (Optional) restore odk central from the backup\nbackup_filename=fmtm-central-db-${GIT_BRANCH}-XXXX-XX-XX-sql.gz\n\ncat \"$backup_filename\" | gunzip | \\\ndocker exec -i \\\nfmtm-${GIT_BRANCH}-central-db-1 \\\npg_restore --verbose -U odk -d odk\n\n# Restore fmtm from the backup\nbackup_filename=fmtm-db-${GIT_BRANCH}-XXXX-XX-XX-sql.gz\n\ncat \"$backup_filename\" | gunzip | \\\ndocker exec -i \\\nfmtm-${GIT_BRANCH}-fmtm-db-1 \\\npg_restore --verbose -U fmtm -d fmtm\n\n# Run the entire docker compose stack\ndocker compose -f docker-compose.$GIT_BRANCH.yml up -d\n</code></pre>"},{"location":"dev/Setup/","title":"Getting Started with Field Mapping Tasking Manager","text":"<ul> <li>Overview<ul> <li>Introduction to Field Mapping Tasking Manager Web App</li> <li>Basic Tools used</li> </ul> </li> <li>Guide for Users<ul> <li>Prerequisites</li> <li>Steps to create a project in FMTM</li> <li>Work on existing projects</li> <li>Help and Support</li> <li>A Thank you note for the users of FMTM</li> </ul> </li> <li>Guide for Developers<ul> <li>FMTM frontend</li> <li>FMTM backend</li> <li>Prerequisites for Contribution</li> <li>Development: Setup Your Local Environment</li> <li>Verify Setup</li> <li>Start Developing</li> </ul> </li> </ul>"},{"location":"dev/Setup/#overview","title":"Overview","text":""},{"location":"dev/Setup/#introduction-to-field-mapping-tasking-manager-web-app","title":"Introduction to Field Mapping Tasking Manager Web App","text":"<p>The FMTM web app is an app that serves as a frontend for the ODK Central server, using the ODK Central API to allocate specific areas/features to individual mappers, and receive their data submissions.</p> <p></p> <p>The FMTM codebase consists of:</p> <ul> <li>An API backend in FastAPI (code in: <code>src/backend</code>)</li> <li>A frontend website in React (code in: <code>src/frontend</code>)</li> </ul>"},{"location":"dev/Setup/#manager-web-interface-with-pc-browser-friendlymap-view","title":"Manager Web Interface (with PC browser-friendlymap view)","text":"<p>A computer-screen-optimized web app that allows Campaign Managers to:</p> <ul> <li>Select AOIs</li> <li>Choose task-splitting schemes</li> <li>Provide instructions and guidance specific to the project</li> <li>View areas that are at various stages of completion</li> <li>Provide a project-specific URL that field mappers can access from their mobile   phones to select and map tasks.</li> </ul>"},{"location":"dev/Setup/#basic-tools-used","title":"Basic Tools used","text":""},{"location":"dev/Setup/#odk-collect","title":"ODK Collect","text":"<p>A mobile data collection tool that functions on almost all Android phones. Field mappers use ODK Collect to select features such as buildings or amenities, and fill out forms with survey questions to collect attributes or data about those features (normally at least some of these attributes are intended to become OSM tags associated with those features).</p> <p>The ODK Collect app connects to a back-end server (in this case ODK Central), which provides the features to be mapped and the survey form definitions.</p>"},{"location":"dev/Setup/#odk-central-server","title":"ODK Central server","text":"<p>An ODK Central server that functions as the back end for the field data collectors' ODK Collect apps on their Android phones. Devs must have access to an ODK Central server with a username and password granting admin credentials.</p> <p>Here are the instructions for setting up an ODK Central server on Digital Ocean (it's very similar on AWS etc)</p>"},{"location":"dev/Setup/#guide-for-users","title":"Guide for Users","text":""},{"location":"dev/Setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Stable internet connection.</li> <li>Mapping Knowledge (Optional): While not mandatory, having some mapping   knowledge can enhance your experience with FMTM. If you are new to mapping we   suggest you to read this</li> </ul>"},{"location":"dev/Setup/#steps-to-create-a-project-in-fmtm","title":"Steps to create a project in FMTM","text":"<ul> <li>Go to fmtm .</li> <li>If you are new then on the top right cornor click on Sign up and create an   account. Else, sign in to your existing account.</li> <li>Click the '+ CREATE NEW PROJECT' button.</li> <li>Enter the project details.</li> </ul> <ul> <li>Upload Area in the GEOJSON file format.</li> </ul> <ul> <li>Define the tasks of the project.</li> </ul> <ul> <li>Select Form.</li> </ul> <ul> <li>Click on Submit button.</li> </ul> <ul> <li>Please watch the video below for more details </li> </ul> <p>https://github.com/hotosm/fmtm/assets/97789856/8b63d8b5-2d13-4e54-8ddb-c262b0745b4f</p>"},{"location":"dev/Setup/#work-on-existing-projects","title":"Work on existing projects","text":"<p>If you donot want to create a new project and wish to work on an existing project then follow the steps below:</p> <ul> <li>Go to fmtm .</li> <li>If you are new then on the top right cornor click on Sign up and create an   account. Else, sign in to your existing account.</li> <li>Click the button Explore Projects.</li> <li>Select the project you can work on.</li> <li>Click on the marked area.</li> <li>Click on start mapping.</li> </ul> <p></p>"},{"location":"dev/Setup/#help-and-support","title":"Help and Support","text":"<p>If you encounter any issues or need assistance while using FMTM, you can access the following resources:</p> <ul> <li>Check the FAQs .</li> <li>Ask your doubts in the Slack channel: #fmtm-field-pilots</li> </ul>"},{"location":"dev/Setup/#thank-you","title":"Thank you","text":"<p>We are excited to have you join our community of passionate mappers and volunteers. FMTM is a powerful platform developed by the Humanitarian OpenStreetMap Team (HOT) to facilitate mapping projects for disaster response, humanitarian efforts, and community development.</p> <p>With FMTM, you have the opportunity to make a real impact by mapping areas that are in need of support. Your contributions help create detailed and up-to-date maps that aid organizations and communities in their efforts to respond to crises, plan infrastructure, and improve the lives of people around the world.</p> <p>Whether you are a seasoned mapper or new to the world of mapping, FMTM provides a user-friendly interface and a range of tools to make your mapping experience smooth and rewarding. You can create tasks, collaborate with other volunteers, and contribute to ongoing projects that align with your interests and expertise.</p> <p>By mapping with FMTM, you are joining a global community of dedicated individuals who share a common goal of using open data to make a positive difference. Together, we can create a more resilient and inclusive world.</p> <p>Explore the projects, join tasks, and contribute your skills to help us build accurate and comprehensive maps. Don't hesitate to ask questions, seek guidance, and engage with fellow mappers through our forums and communication channels.</p> <p>Thank you for being part of FMTM. Your mapping efforts are invaluable, and we appreciate your commitment to making a difference.</p> <p>Happy mapping!</p> <p>The FMTM Team</p>"},{"location":"dev/Setup/#guide-for-developers","title":"Guide for Developers","text":""},{"location":"dev/Setup/#fmtm-frontend","title":"FMTM frontend","text":"<p>To view details about the frontend click here</p>"},{"location":"dev/Setup/#field-mapper-web-interface-with-mobile-friendly-map-view","title":"Field Mapper Web Interface (with mobile-friendly map view)","text":"<p>Ideally with a link that opens ODK Collect directly from the browser, but if that's hard, the fallback is downloading a QR code and importing it into ODK Collect.</p>"},{"location":"dev/Setup/#fmtm-backend","title":"FMTM backend","text":"<p>To in details about the backend click here</p> <p>A backend that converts the project parameters entered by the Campaign Manager in the Manager Web Interface into a corresponding ODK Central project. It's functions include:</p> <ul> <li>Convert the AOI into a bounding box and corresponding Overpass API query</li> <li>Download (using the Overpass API) the OSM features that will be mapped in that   bounding box (buildings and/or amenities) as well as the OSM line features that   will be used as cutlines to subdivide the area</li> <li>Trim the features within the bounding box but outside the AOI polygon</li> <li>Convert the polygon features into centroid points (needed because ODK select   from map doesn't yet deal with polygons; this is likely to change in the future   but for now we'll work with points only)</li> <li>Use line features as cutlines to create individual tasks (squares don't make   sense for field mapping, neighborhoods delineated by large roads, watercourses,   and railways do)</li> <li>Split the AOI into those tasks based on parameters set in the Manager Web   Interface (number of features or area per task, splitting strategy, etc).</li> <li>Use the ODK Central API to create, on the associated ODK Central server:<ul> <li>A project for the whole AOI</li> <li>One survey form for each split task (neighborhood)<ul> <li>This might require modifying the xlsforms (to update the version ID of the   forms and change the name of the geography file being referred to). This is   pretty straightforward using   OpenPyXL,   though we have to be careful to keep the location within the spreadsheet   of these two items consistent.</li> </ul> </li> <li>GeoJSON feature collections for each form (the buildings/amenities etc)</li> <li>An App User for each form, which in turn corresponds to a single task. When   the ODK Collect app on a user's phone is configured to function as that App   User, they have access to only the form and features/area of that task.</li> <li>A set of QR Codes and/or configuration files/strings for ODK Collect, one   for each App User</li> </ul> </li> </ul>"},{"location":"dev/Setup/#prerequisites-for-contribution","title":"Prerequisites for Contribution","text":""},{"location":"dev/Setup/#1-review-documentation","title":"1. Review documentation","text":"<p>Don't forget to review the Contribution guidelines and our Code of Conduct before contributing!</p> <p>Here are the steps to contribute to the frontend of Field Mapping Tasking Manager:</p>"},{"location":"dev/Setup/#2-fork-the-repository","title":"2. Fork the repository","text":"<p>Forking creates a copy of the repository in your own GitHub account. Go to the Field Mapping Tasking Manager repository and click the \"Fork\" button in the top right corner of the page.</p>"},{"location":"dev/Setup/#3-navigate-to-your-working-directory","title":"3. Navigate to your working directory","text":"<p>Open a terminal and navigate to the directory you want to work in using the following command:</p> <p><code>cd &lt;work-dir&gt;</code></p> <p>Make sure to replace <code>&lt;work-dir&gt;</code> with the name of your directory.</p>"},{"location":"dev/Setup/#4-clone-the-forked-repository","title":"4. Clone the forked repository","text":"<p>Clone the forked repository to your local machine using the following command:</p> <p><code>git clone https://github.com/&lt;your-username&gt;/fmtm.git</code></p> <p>Make sure to replace <code>&lt;your-username&gt;</code> with your GitHub username.</p>"},{"location":"dev/Setup/#5-create-a-new-branch","title":"5. Create a new branch","text":"<p>Create a new branch for your changes using the following command:</p> <p><code>git checkout -b branch-name</code></p> <p>Make sure to give your branch a descriptive name that reflects the changes you'll be making.</p>"},{"location":"dev/Setup/#6-make-changes","title":"6. Make changes","text":"<p>Make your contribution, run tests where needed and save.</p>"},{"location":"dev/Setup/#7-add-changes","title":"7. Add changes","text":"<p>Add the changes you've made using the following command:</p> <p><code>git add &lt;file-name&gt;</code></p> <p>Make sure you replace <code>&lt;file-name&gt;</code> with the name of the file you made changes to.</p>"},{"location":"dev/Setup/#8-commit-and-push","title":"8. Commit and push","text":"<p>Once you've added changes, commit them to your local branch using the following command:</p> <p><code>git commit -m \"Add feature\"</code></p> <p>Make sure to write a descriptive commit message that explains the changes you've made. Then, push your changes to your forked repository using the following command:</p> <p><code>git push origin branch-name</code></p>"},{"location":"dev/Setup/#9-submit-a-pull-request","title":"9. Submit a pull request","text":"<p>Go to your forked repository on GitHub and click the \"Pull requests\" tab. Change the base branch from <code>main</code> to <code>development</code>, select the branch that contains your changes from the compare branch, then click \"Create pull request\". This will open a new pull request in the fmtm repository, where you can describe your changes and request that they be merged into the main codebase.</p> <p>Note: After a PR has been approved and merged, if the branch is no longer in use, delete it both locally and remotely. Otherwise we get buried in dead branches we don't need.</p> <p>Use the following commands:</p> <p>Switch out of the branch you want to delete: <code>git checkout &lt;some-other-branch&gt;</code></p> <p>Replace <code>&lt;some-other-branch&gt;</code> with any other existing branch name</p> <p>Delete the branch locally: <code>git branch -d &lt;branch-name&gt;</code> and then delete the branch remotely: <code>git push origin --delete &lt;branch-name&gt;</code></p> <p>Replace <code>&lt;branch-name&gt;</code> with the name of the branch you want to delete</p> <p>That's it! You've now contributed to the Field Mapping Tasking Manager.</p>"},{"location":"dev/Setup/#setup-your-local-environment","title":"Setup Your Local Environment","text":"<p>These steps are essential to run and test your code!</p>"},{"location":"dev/Setup/#1-setup-osm-oauth-20","title":"1. Setup OSM OAUTH 2.0","text":"<p>The FMTM uses OAUTH2 with OSM to authenticate users. To properly configure your FMTM project, you will need to create keys for OSM.</p> <ol> <li> <p>Login to OSM (If you do not have an    account yet, click the signup button at the top navigation bar to create one).    Click the drop down arrow on the extreme right of the navigation bar and    select My Settings.</p> </li> <li> <p>Register your FMTM instance to OAuth 2 applications. Put your login redirect    url as <code>http://127.0.0.1:7051/osmauth/</code>, For Production replace the URL as    production API Url</p> <p>Note: <code>127.0.0.1</code> is required instead of <code>localhost</code> due to OSM restrictions.</p> <p></p> </li> <li> <p>Right now read user preferences permission is enough later on fmtm may need    permission to modify the map option which should be updated on OSM_SCOPE    variable on .env , Keep read_prefs for now.</p> </li> <li> <p>Now Copy your Client ID and Client Secret. Put them in the <code>OSM_CLIENT_ID</code>    and <code>OSM_CLIENT_SECRET</code> field of your <code>.env</code> file</p> </li> </ol>"},{"location":"dev/Setup/#2-create-an-env-file","title":"2. Create an <code>.env</code> File","text":"<p>Environmental variables are used throughout this project. To get started, create <code>.env</code> file in the top level dir, a sample is located at <code>.env.example</code>.</p> <p>This can be created interactively by running:</p> <pre><code>bash scripts/gen-env.sh\n</code></pre> <p>Note: If extra cors origins are required for testing, the variable <code>EXTRA_CORS_ORIGINS</code> is a set of comma separated strings, e.g.: http://fmtm.localhost:7050,http://some.other.domain</p>"},{"location":"dev/Setup/#verify-setup","title":"Verify Setup","text":""},{"location":"dev/Setup/#check-deployment","title":"Check Deployment","text":"<p>For details on how to run this project locally for development, please look at: Backend Docs</p>"},{"location":"dev/Setup/#check-authentication","title":"Check Authentication","text":"<p>Once you have deployed, you will need to check that you can properly authenticate.</p> <ol> <li> <p>Navigate to <code>http://api.fmtm.localhost:7050/docs</code></p> <p>Three endpoints are responsible for oauth  </p> </li> <li> <p>Select the <code>/auth/osm_login/</code> endpoint, click <code>Try it out</code> and then    <code>Execute</code>.     This would give you the Login URL where you can supply your osm username    and password.</p> <p>Your response should look like this:</p> <pre><code>{\n  \"login_url\": \"https://www.openstreetmap.org/oauth2/authorize/?response_type=code&amp;client_id=xxxx\"\n}\n</code></pre> <p>Now copy and paste your login_url in a new tab. You would be redirected to  OSM for your LOGIN. Give FMTM the necessary permission.</p> <p>After a successful login, you will get your <code>access_token</code> for FMTM, Copy  it. Now, you can use it for rest of the endpoints that needs authorization.</p> </li> <li> <p>Check your access token: Select the <code>/auth/me/</code> endpoint and click    <code>Try it out</code>.     Pass in the <code>access_token</code> you copied in the previous step into the    <code>access-token</code> field and click <code>Execute</code>. You should get your osm id,    username and profile picture id.</p> </li> </ol>"},{"location":"dev/Setup/#start-developing","title":"Start Developing","text":"<p>Don't forget to review the Contribution guidelines and our Code of Conduct before contributing!</p> <p>Happy coding!</p> <p>The FMTM Developer Team</p>"},{"location":"dev/Troubleshooting/","title":"Troubleshooting \ud83c\udd98","text":""},{"location":"dev/Troubleshooting/#running-fmtm-standalone","title":"Running FMTM standalone","text":"<ul> <li>Although it's easiest to use Docker, sometimes it may no be feasible, or not preferred.</li> <li>We use a tool called PDM to manage dependencies.</li> <li>PDM can run in two modes: venv and PEP582 (<code>__pypackages__</code>).</li> <li>Be careful when running FMTM you are not accidentally pulling in your system packages.</li> </ul>"},{"location":"dev/Troubleshooting/#tips","title":"Tips","text":"<ul> <li>If a directory <code>__pypackages__</code> exists, delete it and attempt to   <code>pdm install</code>   again.</li> <li>If the <code>__pypackages__</code> directory returns, then force using venv instead   <code>pdm config python.use_venv true</code>   and remove the directory again.</li> <li>Troubleshoot the packages PDM sees with:   <code>pdm run pip list</code></li> <li>Check a package can be imported in the PDM-based Python environment:</li> </ul> <pre><code>pdm run python\nimport fastapi\n</code></pre> <p>If you receive errors such as:</p> <pre><code>pydantic.error_wrappers.ValidationError: 3 validation errors for Settings\nOSM_URL\n  field required (type=value_error.missing)\nOSM_SCOPE\n  field required (type=value_error.missing)\nOSM_LOGIN_REDIRECT_URI\n  field required (type=value_error.missing)\n</code></pre> <p>Then you need to set the env variables on your system.</p> <p>If you would rather not do this, an alternative can be to feed them into the pdm command:</p> <pre><code>FMTM_DOMAIN=\"\" \\\nOSM_CLIENT_ID=\"\" OSM_CLIENT_SECRET=\"\" OSM_SECRET_KEY=\"\" \\\nS3_ACCESS_KEY=\"\" S3_SECRET_KEY=\"\" \\\npdm run uvicorn app.main:api --host 0.0.0.0 --port 8000\n</code></pre>"}]}